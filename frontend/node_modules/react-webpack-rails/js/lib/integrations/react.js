'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactIntegration = function () {
  function ReactIntegration() {
    _classCallCheck(this, ReactIntegration);

    this.components = {};
    this.registerComponent = this.registerComponent.bind(this);
    this.getComponent = this.getComponent.bind(this);
    this.createComponent = this.createComponent.bind(this);
    this.renderComponent = this.renderComponent.bind(this);
    this.unmountComponent = this.unmountComponent.bind(this);
    this.renderComponentToString = this.renderComponentToString.bind(this);
  }

  _createClass(ReactIntegration, [{
    key: 'registerComponent',
    value: function registerComponent(name, component) {
      this.components[name] = component;
    }
  }, {
    key: 'getComponent',
    value: function getComponent(name) {
      return this.components[name];
    }
  }, {
    key: 'createComponent',
    value: function createComponent(name, props) {
      var constructor = this.getComponent(name);
      return _react2.default.createElement(constructor, props);
    }
  }, {
    key: 'renderComponent',
    value: function renderComponent(name, props, node) {
      var component = this.createComponent(name, props);
      _reactDom2.default.render(component, node);
    }
  }, {
    key: 'unmountComponent',
    value: function unmountComponent(node) {
      _reactDom2.default.unmountComponentAtNode(node);
    }
  }, {
    key: 'renderComponentToString',
    value: function renderComponentToString(name, props) {
      var component = this.createComponent(name, props);
      return _server2.default.renderToString(component);
    }
  }, {
    key: 'integrationWrapper',
    get: function get() {
      return {
        mount: function _mount(node, payload) {
          this.renderComponent(payload.name, payload.props, node);
        }.bind(this),

        unmount: function _unmount(node) {
          this.unmountComponent(node);
        }.bind(this),

        nodeRun: function _prerender(payload) {
          return this.renderComponentToString(payload.name, payload.props);
        }.bind(this)
      };
    }
  }]);

  return ReactIntegration;
}();

exports.default = new ReactIntegration();