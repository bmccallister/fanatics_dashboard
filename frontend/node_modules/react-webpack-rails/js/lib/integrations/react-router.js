'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function deprecationWarning() {
  if (typeof console !== 'undefined' && console.warn) {
    var msg = ['Deprecation warning - since v0.3.0: current integration with react-router was extracted and moved to external plugin.', 'Use https://github.com/netguru/rwr-react_router instead.'];

    console.warn(msg.join('\n'));
  }
}

var ReactRouterIntegration = function () {
  function ReactRouterIntegration() {
    _classCallCheck(this, ReactRouterIntegration);

    this.routers = {};
    this.enabled = false;
    this.registerRouter = this.registerRouter.bind(this);
    this.getRouter = this.getRouter.bind(this);
    this.renderRouter = this.renderRouter.bind(this);
  }

  _createClass(ReactRouterIntegration, [{
    key: 'registerRouter',
    value: function registerRouter(name, route) {
      deprecationWarning();
      this.routers[name] = route;
    }
  }, {
    key: 'getRouter',
    value: function getRouter(name) {
      return this.routers[name];
    }
  }, {
    key: 'renderRouter',
    value: function renderRouter(name, node) {
      if (this.enabled === true) {
        throw new Error('Error when rendering ' + name + '\n\trenderRouter: can\'t render more than one router.');
      }
      this.enabled = true;
      _reactDom2.default.render(this.getRouter(name), node);
    }
  }, {
    key: 'unmountRouter',
    value: function unmountRouter(node) {
      _reactDom2.default.unmountComponentAtNode(node);
      this.enabled = false;
    }
  }, {
    key: 'integrationWrapper',
    get: function get() {
      return {
        mount: function _mount(node, payload) {
          this.renderRouter(payload.name, node);
        }.bind(this),

        unmount: function _unmount(node) {
          this.unmountRouter(node);
        }.bind(this)
      };
    }
  }]);

  return ReactRouterIntegration;
}();

exports.default = new ReactRouterIntegration();