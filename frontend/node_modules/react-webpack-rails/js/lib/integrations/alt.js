'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _integrationsManager = require('./../integrations-manager');

var _integrationsManager2 = _interopRequireDefault(_integrationsManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AltIntegration = function () {
  function AltIntegration(alt) {
    _classCallCheck(this, AltIntegration);

    this.alt = alt;
    this.initStore = this.initStore.bind(this);
  }

  _createClass(AltIntegration, [{
    key: 'initStore',
    value: function initStore(name, payload) {
      var store = this.alt.stores[name];
      Object.assign(store.state, payload);
      store.emitChange();
    }
  }, {
    key: 'run',
    value: function run() {
      _integrationsManager2.default.register('alt-store', this.integrationWrapper);
    }
  }, {
    key: 'integrationWrapper',
    get: function get() {
      return {
        mount: function _mount(_node, payload) {
          this.initStore(payload.name, payload.data);
        }.bind(this),

        prerender: function _unmount(payload) {
          this.initStore(payload.name, payload.data);
        }.bind(this)
      };
    }
  }]);

  return AltIntegration;
}();

exports.default = AltIntegration;